functions:
	show prompt: use PS1 from env, parse escape sequences: man bash Â§PROMPTING
	get input: allow keys to modify input - read 1 char at a time, output that char or do action
																^D runs exit
	parse input:
	- is builtin?
	- args
	- redirections (<, >, >>)
	- handle all variables
	run program:
	- if builtin, run function
	- if program, run program:
		- full path to program (search PATH)
		- fork
		- execve
		- then use waitpid()
	handle signals: ^C to kill, ^Z to suspend (maybe?)

t_userinput:
program_name
program_args
is_builtin
redirect_type


current structure:
minishell functions:			libft functions:								system functions:
main:							ft_strdel, ft_putstr
	envp_init					ft_parrlen, ft_memalloc, ft_memcpy, ft_strdup	getcwd
		envvar_set
	get_path_from_envp			ft_memalloc, ft_chrcount, ft_strclen, ft_strsub, ft_strdup
		envvar_get
	show_prompt					ft_putstr, ft_putchar, ft_strnequ
		envvar_get
		put_hostname			ft_putstr, ft_putchar							gethostname
		put_username			ft_putstr
			envvar_get
		put_cwd					ft_strlen, ft_strnequ, ft_memmove, ft_putstr
			envvar_get
		put_uidchar				ft_putchar										geteuid
	get_input					get_next_line
	parse_input					ft_strclen, ft_strsub, ft_strchr, ft_strdup, ft_strstr
		replace_vars			ft_strchr, ft_isalnum, ft_strnew, ft_strncpy, ft_strlen, ft_strclen, ft_strcat, ft_strdel
			envvar_get
		envvar_set
		is_builtin				ft_strequ
	run_function				ft_strequ
		builtin_echo			ft_putstr, ft_putchar
		builtin_exit			ft_atoi											exit
			free_envp
		builtin_clear			ft_putstr
		builtin_cd																getcwd, chdir, perror
			envvar_get
			envvar_set
		builtin_pwd				ft_putendl										getcwd, perror
		builtin_setenv			ft_strchr, ft_strclen, ft_strsub, ft_strdel, ft_putendl
			envvar_set
		builtin_unsetenv		ft_strlen, ft_strsub, ft_printf, ft_putendl
			envvar_get
			envvar_del
		builtin_env				ft_strchr, ft_putendl
			builtin_setenv
			parse_input
			get_path_from_envp
			get_path
			run_program
			wait_for_pid
	get_path					ft_strjoin3
		check_folder_for_file	ft_strequ								opendir, readdir, closedir
	run_program					ft_chrcount, ft_strsplit, ft_putendl, ft_realloc, ft_memmove, ft_memalloc, ft_putstr
																		exit, fork, execve, perror
	wait_for_pid														waitpid, perror
	free_envp					ft_strdel, ft_memdel


allowed functions:
malloc		void *malloc(size_t size);
free		void free(void *ptr);
access		int access(const char *path, int mode);

open		int open(const char *path, int oflag, ...(mode_t mode));
close		int close(int fildes);
read		ssize_t read(int fildes, void *buf, size_t nbyte);
write		ssize_t write(int fildes, const void *buf, size_t nbyte);
opendir		DIR *opendir(const char *filename);
readdir		struct dirent *readdir(DIR *dirp);
closedir	int closedir(DIR *dirp);

getcwd		char *getcwd(char *buf, size_t size);
chdir		int chdir(const char *path);
stat		int stat(const char *restrict path, struct stat *restrict buf);
lstat		int lstat(const char *restrict path, struct stat *restruct buf);
fstat		int fstat(int fildes, struct stat *buf);
fork		pid_t fork(void);
execve		int execve(const char *path, char *const argv[], char *const envp[]);
wait		pid_t wait(inst *stat_loc);
waitpid		pid_t waitpid(pid_t pid, int *stat_loc, int options);
wait3		pid_t wait3(int *stat_loc, int options, struct rusage *rusage);
wait4		pid_t wait4(pid_t pid, int *stat_loc, int options, struct rusage *rusage);
signal		sig_t signal(int sig, sig_t func);
kill		int kill(pid_t pid, int sig);
exit		void exit(int status);

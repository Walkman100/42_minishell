functions:
	show prompt: use PS1 from env, parse escape sequences: man bash Â§PROMPTING
	get input: allow keys to modify input - read 1 char at a time, output that char or do action
																^D runs exit
	parse input:
	- is builtin?
	- args
	- redirections (<, >, >>)
	- handle all variables
	run program:
	- if builtin, run function
	- if program, run program:
		- full path to program (search PATH)
		- fork
		- execve
		- then use waitpid()
	handle signals: ^C to kill, ^Z to suspend (maybe?)

builtins:
simple: echo, exit, clear
cd: use chdir
pwd: use getcwd

setenv
unsetenv
env: use [un]setenv for setting, print env for no args
									(list_to_array)

void show_prompt(void);
char *get_input(void);
t_userinput parse_input(char *userinput);
char **list_to_array(char *env_var);
char *get_path(char *program_name);
run_program(char *program_path, t_userinput userinput);
	wait_for_pid
run_function(char *function, t_userinput userinput);

t_userinput:
program_name
program_args
is_builtin
redirect_type


allowed functions:
malloc		void *malloc(size_t size);
free		void free(void *ptr);
access		int access(const char *path, int mode);

open		int open(const char *path, int oflag, ...(mode_t mode));
close		int close(int fildes);
read		ssize_t read(int fildes, void *buf, size_t nbyte);
write		ssize_t write(int fildes, const void *buf, size_t nbyte);
opendir		DIR *opendir(const char *filename);
readdir		struct dirent *readdir(DIR *dirp);
closedir	int closedir(DIR *dirp);

getcwd		char *getcwd(char *buf, size_t size);
chdir		int chdir(const char *path);
stat		int stat(const char *restrict path, struct stat *restrict buf);
lstat		int lstat(const char *restrict path, struct stat *restruct buf);
fstat		int fstat(int fildes, struct stat *buf);
fork		pid_t fork(void);
execve		int execve(const char *path, char *const argv[], char *const envp[]);
wait		pid_t wait(inst *stat_loc);
waitpid		pid_t waitpid(pid_t pid, int *stat_loc, int options);
wait3		pid_t wait3(int *stat_loc, int options, struct rusage *rusage);
wait4		pid_t wait4(pid_t pid, int *stat_loc, int options, struct rusage *rusage);
signal		sig_t signal(int sig, sig_t func);
kill		int kill(pid_t pid, int sig);
exit		void exit(int status);

must implement builtins:
echo
cd
setenv
unsetenv
env
exit

must manage expansions: $ and ~

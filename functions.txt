malloc		void *malloc(size_t size);
free		void free(void *ptr);
access		int access(const char *path, int mode);
open		int open(const char *path, int oflag, ...(mode_t mode));
close		int close(int fildes);
read		ssize_t read(int fildes, void *buf, size_t nbyte);
write		ssize_t write(int fildes, const void *buf, size_t nbyte);
opendir		DIR *opendir(const char *filename);
readdir		struct dirent *readdir(DIR *dirp);
closedir	int closedir(DIR *dirp);
getcwd		char *getcwd(char *buf, size_t size);
chdir		int chdir(const char *path);
stat		int stat(const char *restrict path, struct stat *restrict buf);
lstat		int lstat(const char *restrict path, struct stat *restruct buf);
fstat		int fstat(int fildes, struct stat *buf);
fork		pid_t fork(void);
execve		int execve(const char *path, char *const argv[], char *const envp[]);
wait		pid_t wait(inst *stat_loc);
waitpid		pid_t waitpid(pid_t pid, int *stat_loc, int options);
wait3		pid_t wait3(int *stat_loc, int options, struct rusage *rusage);
wait4		pid_t wait4(pid_t pid, int *stat_loc, int options, struct rusage *rusage);
signal		sig_t signal(int sig, sig_t func);
kill		int kill(pid_t pid, int sig);
exit		void exit(int status);


access      int access(const char *path, int mode);

The access() system call checks the accessibility of the file named by the [path] argument for the access permissions indicated by the [mode] argument.
The value of [mode] is either the bitwise-inclusive OR of the access permissions to be checked (R_OK for read permission, W_OK for write permission,
and X_OK for execute/search permission), or the existence test (F_OK).

For additional information, see the File Access Permission section of intro(2).


opendir     DIR *opendir(const char *filename);

The opendir() function opens the directory named by filename, associates a directory stream with it and returns a pointer to be used to identify the
directory stream in subsequent operations.  The pointer NULL is returned if filename cannot be accessed, or if it cannot malloc(3) enough memory to hold the
whole thing, and sets the global variable errno to indicate the error.

DIR:
    /* structure describing an open directory. */
    typedef struct _dirdesc {
        int             __dd_fd;        /* file descriptor associated with directory */
        long            __dd_loc;       /* offset in current buffer */
        long            __dd_size;      /* amount of data returned by getdirentries */
        char            *__dd_buf;      /* data buffer */
        int             __dd_len;       /* size of data buffer */
        long            __dd_seek;      /* magic cookie returned by getdirentries */
        long            __dd_rewind;    /* magic cookie for rewinding */
        int             __dd_flags;     /* flags for readdir */
        pthread_mutex_t __dd_lock;      /* for thread locking */
        struct _telldir *__dd_td;       /* telldir position recording */
    } DIR;


readdir     struct dirent *readdir(DIR *dirp);

The readdir() function returns a pointer to the next directory entry.  It returns NULL upon reaching the end of the directory or on error.  In the event of
an error, errno may be set to any of the values documented for the getdirentries(2) system call.  Note that the order of the directory entries vended by
readdir() is not specified. Some filesystems may return entries in lexicographic sort order and others may not.

dirent:
    (define _DARWIN_USE_64_BIT_INODE before including header files, see stat(2))
    /*
     * The dirent structure defines the format of directory entries.
     *
     * A directory entry has a struct dirent at the front of it, containing its
     * inode number, the length of the entry, and the length of the name
     * contained in the entry.  These are followed by the name padded to a 4
     * byte boundary with null bytes.  All names are guaranteed null terminated.
     * The maximum length of a name in a directory is 1023.
     */

    struct dirent { /* when _DARWIN_FEATURE_64_BIT_INODE is defined */
        ino_t      d_fileno;     /* file number of entry */
        __uint64_t d_seekoff;    /* seek offset (optional, used by servers) */
        __uint16_t d_reclen;     /* length of this record */
        __uint16_t d_namlen;     /* length of string in d_name */
        __uint8_t  d_type;       /* file type, see below */
        char    d_name[1024];    /* name must be no longer than this */
    };

    /*
     * File types
     */
    #define DT_UNKNOWN       0
    #define DT_FIFO          1
    #define DT_CHR           2
    #define DT_DIR           4
    #define DT_BLK           6
    #define DT_REG           8
    #define DT_LNK          10
    #define DT_SOCK         12
    #define DT_WHT          14


closedir    int closedir(DIR *dirp);

The closedir() function closes the named directory stream and frees the structure associated with the dirp pointer, returning 0 on success.  On failure, -1
is returned and the global variable errno is set to indicate the error.


getcwd      char *getcwd(char *buf, size_t size);

The getcwd() function copies the absolute pathname of the current working directory into the memory referenced by [buf] and returns a pointer to [buf].
The [size] argument is the size, in bytes, of the array referenced by [buf].

If [buf] is NULL, space is allocated as necessary to store the pathname and [size] is ignored.  This space may later be free(3)'d.


chdir       int chdir(const char *path);

The [path] argument points to the pathname of a directory.  The chdir() function causes the named directory to become the current working directory, that is,
the starting point for path searches of pathnames not beginning with a slash, `/'.

In order for a directory to become the current directory, a process must have execute (search) access to the directory.

Upon successful completion, a value of 0 is returned.  Otherwise, a value of -1 is returned and [errno] is set to indicate the error.


stat        int stat(const char *restrict path, struct stat *restrict buf);

The stat() function obtains information about the file pointed to by [path].  Read, write or execute permission of the named file is not required, but all
directories listed in the path name leading to the file must be searchable.
Upon successful completion a value of 0 is returned.  Otherwise, a value of -1 is returned and [errno] is set to indicate the error.

The [buf] argument is a pointer to a [stat] structure as defined by <sys/stat.h> and into which information is placed concerning the file.
    struct stat { /* when _DARWIN_FEATURE_64_BIT_INODE is defined */
        dev_t           st_dev;           /* ID of device containing file */
        mode_t          st_mode;          /* Mode of file (see below) */
        nlink_t         st_nlink;         /* Number of hard links */
        ino_t           st_ino;           /* File serial number */
        uid_t           st_uid;           /* User ID of the file */
        gid_t           st_gid;           /* Group ID of the file */
        dev_t           st_rdev;          /* Device ID */
        struct timespec st_atimespec;     /* time of last access */
        struct timespec st_mtimespec;     /* time of last data modification */
        struct timespec st_ctimespec;     /* time of last status change */
        struct timespec st_birthtimespec; /* time of file creation(birth) */
        off_t           st_size;          /* file size, in bytes */
        blkcnt_t        st_blocks;        /* blocks allocated for file */
        blksize_t       st_blksize;       /* optimal blocksize for I/O */
        uint32_t        st_flags;         /* user defined flags for file */
        uint32_t        st_gen;           /* file generation number */
        int32_t         st_lspare;        /* RESERVED: DO NOT USE! */
        int64_t         st_qspare[2];     /* RESERVED: DO NOT USE! */
    };

The time-related fields of [struct stat] are as follows:
    st_atime        Time when file data last accessed.  Changed by the mknod(2), utimes(2) and read(2) system calls.

    st_mtime        Time when file data last modified.  Changed by the mknod(2), utimes(2) and write(2) system calls.

    st_ctime        Time when file status was last changed (inode data modification).  Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2),
                    unlink(2), utimes(2) and write(2) system calls.

    st_birthtime    Time of file creation. Only set once when the file is created. This field is only available in the 64 bit inode variants. On filesystems
                    where birthtime is not available, this field is set to 0 (i.e. epoch).

The size-related fields of the structures are as follows:
    st_blksize      The optimal I/O block size for the file.

    st_blocks       The actual number of blocks allocated for the file in 512-byte units.  As short symbolic links are stored in the inode, this number may be
                    zero.

The status information word st_mode has the following bits:
    #define S_IFMT   0170000    61440   /* type of file */
    #define S_IFWHT  0160000    57344   /* whiteout */
    #define S_IFSOCK 0140000    49152   /* socket */
    #define S_IFLNK  0120000    40960   /* symbolic link */
    #define S_IFREG  0100000    32768   /* regular */
    #define S_IFBLK  0060000    24576   /* block special */
    #define S_IFDIR  0040000    16384   /* directory */
    #define S_IFCHR  0020000    8192    /* character special */
    #define S_IFIFO  0010000    4096    /* named pipe (fifo) */
    #define S_ISUID  0004000    2048    /* set user id on execution */
    #define S_ISGID  0002000    1024    /* set group id on execution */
    #define S_ISVTX  0001000    512     /* save swapped text even after use */      STICKY BIT (see man 2 chmod)
    #define S_IRUSR  0000400    256     /* read permission, owner */
    #define S_IWUSR  0000200    128     /* write permission, owner */
    #define S_IXUSR  0000100    64      /* execute/search permission, owner */
    #define S_IRGRP  0000040    32      /* R for group */
    #define S_IWGRP  0000020    16      /* W for group */
    #define S_IXGRP  0000010    8       /* X for group */
    #define S_IROTH  0000004    4       /* R for other */
    #define S_IWOTH  0000002    2       /* W for other */
    #define S_IXOTH  0000001    1       /* X for other */

struct timespec
{
    __time_t            tv_sec;     /* Seconds.  */
    __syscall_slong_t   tv_nsec;    /* Nanoseconds.  */
};

(find at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/sys/_types/_timespec.h)
_STRUCT_TIMESPEC
{
    __darwin_time_t     tv_sec;
    long                tv_nsec;
};


lstat       int lstat(const char *restrict path, struct stat *restrict buf);

The lstat() function is like stat() except in the case where the named file is a symbolic link; lstat() returns information about the link, while stat()
returns information about the file the link references. For symbolic links, the st_mode member contains meaningful information when used with the file type
macros, and the st_size member contains the length of the pathname contained in the symbolic link. File mode bits and the contents of the remaining members
of the stat structure are unspecified. The value returned in the st_size member is the length of the contents of the symbolic link, and does not count any
trailing null.
Upon successful completion a value of 0 is returned. Otherwise, a value of -1 is returned and [errno] is set to indicate the error.


fstat       int fstat(int fildes, struct stat *buf);

The fstat() obtains the same information about an open file known by the file descriptor fildes.
Upon successful completion a value of 0 is returned. Otherwise, a value of -1 is returned and [errno] is set to indicate the error.


fork        pid_t fork(void);

fork() causes creation of a new process. The new process (child process) is an exact copy of the calling process (parent process) except for the following:
- The child process has a unique process ID.
- The child process has a different parent process ID (i.e., the process ID of the parent process).
- The child process has its own copy of the parent's descriptors. These descriptors reference the same underlying objects, so that, for instance,
	file pointers in file objects are shared between the child and the parent, so that an lseek(2) on a descriptor in the child process can affect a
	subsequent read or write by the parent. This descriptor copying is also used by the shell to establish standard input and output for newly created
	processes as well as to set up pipes.
- The child processes resource utilizations are set to 0; see setrlimit(2).
Upon successful completion, fork() returns a value of 0 to the child process and returns the process ID of the child process to the parent process.
Otherwise, a value of -1 is returned to the parent process, no child process is created, and the global variable [errno] is set to indicate the error.


execve      int execve(const char *path, char *const argv[], char *const envp[]);

execve() transforms the calling process into a new process. The new process is constructed from an ordinary file, whose name is pointed to by path, called
the new process file. This file is either an executable object file, or a file of data for an interpreter.
As the execve() function overlays the current process image with a new process image, the successful call has no process to return to. If execve() does
return to the calling process, an error has occurred; the return value will be -1 and the global variable errno is set to indicate the error.


wait        pid_t wait(inst *stat_loc);

The wait() function suspends execution of its calling process until [stat_loc] information is available for a terminated child process, or a signal is
received. On return from a successful wait() call, the [stat_loc] area contains termination information about the process that exited as defined below.


waitpid     pid_t waitpid(pid_t pid, int *stat_loc, int options);
wait3       pid_t wait3(int *stat_loc, int options, struct rusage *rusage);
wait4       pid_t wait4(pid_t pid, int *stat_loc, int options, struct rusage *rusage);

The wait4() call provides a more general interface for programs that need to wait for certain child processes, that need resource utilization statistics
accumulated by child processes, or that require options.  The other wait functions are implemented using wait4().

The [pid] parameter specifies the set of child processes for which to wait.  If [pid] is -1, the call waits for any child process.  If [pid] is 0, the call
waits for any child process in the process group of the caller. If [pid] is greater than zero, the call waits for the process with process id [pid].  If [pid]
is less than -1, the call waits for any process whose process group id equals the absolute value of [pid].

The [stat_loc] parameter is defined below. The [options] parameter contains the bitwise OR of any of the following options. The WNOHANG option is used to
indicate that the call should not block if there are no processes that wish to report status. If the WUNTRACED option is set, children of the current process
that are stopped due to a SIGTTIN, SIGTTOU, SIGTSTP, or SIGSTOP signal also have their status reported.

If [rusage] is non-zero, a summary of the resources used by the terminated process and all its children is returned (this information is currently not
available for stopped processes).

When the WNOHANG option is specified and no processes wish to report status, wait4() returns a process id of 0.

The waitpid() call is identical to wait4() with an [rusage] value of zero. The older wait3() call is the same as wait4() with a [pid] value of -1.

The following macros may be used to test the manner of exit of the process.  One of the first three macros will evaluate to a non-zero (true) value:
WIFEXITED(status):		True if the process terminated normally by a call to _exit(2) or exit(3).
WIFSIGNALED(status):	True if the process terminated due to receipt of a signal.
WIFSTOPPED(status):		True if the process has not terminated, but has stopped and can be restarted.  This macro can be true only if the wait call specified
							the WUNTRACED option or if the child process is being traced (see ptrace(2)).

Depending on the values of those macros, the following macros produce the remaining status information about the child process:
WEXITSTATUS(status):	If WIFEXITED(status) is true, evaluates to the low-order 8 bits of the argument passed to _exit(2) or exit(3) by the child.
WTERMSIG(status):		If WIFSIGNALED(status) is true, evaluates to the number of the signal that caused the termination of the process.
WCOREDUMP(status):		If WIFSIGNALED(status) is true, evaluates as true if the termination of the process was accompanied by the creation of a core file
							containing an image of the process when the signal was received.
WSTOPSIG(status):		If WIFSTOPPED(status) is true, evaluates to the number of the signal that caused the process to stop.


signal      sig_t signal(int sig, sig_t func);


kill        int kill(pid_t pid, int sig);


exit        void exit(int status);

exit() terminates a process. The exit() function never returns.
